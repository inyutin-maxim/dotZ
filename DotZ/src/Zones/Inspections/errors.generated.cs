//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by JetBrains ErrorDescriptionGenerator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Drawing;
using JetBrains.DataFlow;
using JetBrains.ReSharper.Psi;
using JetBrains.ReSharper.Daemon;
using JetBrains.DocumentModel;
using JetBrains.ReSharper.Psi.Resolve;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.Util;
using JetBrains.ReSharper.Psi.CSharp.Tree;
using JetBrains.ReSharper.Daemon.UsageChecking;

  [assembly: 
      JetBrains.ReSharper.Daemon.RegisterStaticHighlightingsGroupAttribute ("ReSharperValidatorErrors", "ReSharper validation errors", true),
  ]
namespace DotZ.Zones.Inspections
{
  #region IncorrectReferenceError
  [StaticSeverityHighlighting(Severity.ERROR,"ReSharperValidatorErrors",OverlapResolve=OverlapResolveKind.ERROR,ToolTipFormatString = MESSAGE)]
  public partial class IncorrectReferenceError : IHighlighting, JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange
  {
    protected const string MESSAGE = "{0}";
    private readonly ITreeNode myNode;
    private readonly IClass myCls;
    private readonly string myDescription;
    private readonly string myMessage = null;
    
    public IncorrectReferenceError(ITreeNode node, IClass cls, string description)
    {
      myNode = node;
      myCls = cls;
      myDescription = description;
      myMessage = string.Format(MESSAGE, myDescription);
    }
    
    public ITreeNode Node {get{return myNode;}}
    public IClass Cls {get{return myCls;}}
    public string Description {get{return myDescription;}}
    public string ToolTip { get {return myMessage;} }
    public string ErrorStripeToolTip { get {return ToolTip;} }
    public int NavigationOffsetPatch { get {return 0;} }
    JetBrains.DocumentModel.DocumentRange JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange.CalculateRange() { return myNode.GetHighlightingRange(); }
    private JetBrains.DocumentModel.DocumentRange CalculateRange() { return myNode.GetHighlightingRange(); }
    public bool IsValid()
    {
      return (myNode == null || myNode.IsValid()) && (myCls == null || myCls.IsValid());
    }
    
  }
  #endregion
  #region IncorrectNamespaceNestingError
  [StaticSeverityHighlighting(Severity.ERROR,"ReSharperValidatorErrors",OverlapResolve=OverlapResolveKind.ERROR,ToolTipFormatString = MESSAGE)]
  public partial class IncorrectNamespaceNestingError : IHighlighting, JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange
  {
    protected const string MESSAGE = "Namespace name be prefixed with '{0}' to be zoned correctly";
    private readonly IDeclaration myNamespaceDeclaration;
    private readonly ITreeNode myNode;
    private readonly string myProperNamespacePrefix;
    private readonly string myMessage = null;
    
    public IncorrectNamespaceNestingError(IDeclaration namespaceDeclaration, ITreeNode node, string properNamespacePrefix)
    {
      myNamespaceDeclaration = namespaceDeclaration;
      myNode = node;
      myProperNamespacePrefix = properNamespacePrefix;
      myMessage = string.Format(MESSAGE, myProperNamespacePrefix);
    }
    
    public IDeclaration NamespaceDeclaration {get{return myNamespaceDeclaration;}}
    public ITreeNode Node {get{return myNode;}}
    public string ProperNamespacePrefix {get{return myProperNamespacePrefix;}}
    public string ToolTip { get {return myMessage;} }
    public string ErrorStripeToolTip { get {return ToolTip;} }
    public int NavigationOffsetPatch { get {return 0;} }
    JetBrains.DocumentModel.DocumentRange JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange.CalculateRange() { return myNode.GetDocumentRange(); }
    private JetBrains.DocumentModel.DocumentRange CalculateRange() { return myNode.GetDocumentRange(); }
    public bool IsValid()
    {
      return (myNamespaceDeclaration == null || myNamespaceDeclaration.IsValid()) && (myNode == null || myNode.IsValid());
    }
    
  }
  #endregion
  #region UndefinedAxisError
  [StaticSeverityHighlighting(Severity.ERROR,"ReSharperValidatorErrors",OverlapResolve=OverlapResolveKind.ERROR,ToolTipFormatString = MESSAGE)]
  public partial class UndefinedAxisError : IHighlighting, JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange
  {
    protected const string MESSAGE = "'{0}' is not attributed with '{1}'";
    private readonly IUserDeclaredTypeUsage myTypeUsage;
    private readonly string myDependencyClass;
    private readonly string myAxisAttribute;
    private readonly string myMessage = null;
    
    public UndefinedAxisError(IUserDeclaredTypeUsage typeUsage, string dependencyClass, string axisAttribute)
    {
      myTypeUsage = typeUsage;
      myDependencyClass = dependencyClass;
      myAxisAttribute = axisAttribute;
      myMessage = string.Format(MESSAGE, myDependencyClass, myAxisAttribute);
    }
    
    public IUserDeclaredTypeUsage TypeUsage {get{return myTypeUsage;}}
    public string DependencyClass {get{return myDependencyClass;}}
    public string AxisAttribute {get{return myAxisAttribute;}}
    public string ToolTip { get {return myMessage;} }
    public string ErrorStripeToolTip { get {return ToolTip;} }
    public int NavigationOffsetPatch { get {return 0;} }
    JetBrains.DocumentModel.DocumentRange JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange.CalculateRange() { return myTypeUsage.GetDocumentRange(); }
    private JetBrains.DocumentModel.DocumentRange CalculateRange() { return myTypeUsage.GetDocumentRange(); }
    public bool IsValid()
    {
      return (myTypeUsage == null || myTypeUsage.IsValid());
    }
    
  }
  #endregion
  #region RedundantDependencySpecificationError
  [StaticSeverityHighlighting(Severity.ERROR,"ReSharperValidatorErrors",OverlapResolve=OverlapResolveKind.ERROR,ToolTipFormatString = MESSAGE)]
  public partial class RedundantDependencySpecificationError : IHighlighting, JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange
  {
    protected const string MESSAGE = "Zone requirement is redundant. Code is already marked with this zone.";
    private readonly IUserDeclaredTypeUsage myTypeUsage;
    
    public RedundantDependencySpecificationError(IUserDeclaredTypeUsage typeUsage)
    {
      myTypeUsage = typeUsage;
    }
    
    public IUserDeclaredTypeUsage TypeUsage {get{return myTypeUsage;}}
    public string ToolTip { get {return MESSAGE;} }
    public string ErrorStripeToolTip { get {return ToolTip;} }
    public int NavigationOffsetPatch { get {return 0;} }
    JetBrains.DocumentModel.DocumentRange JetBrains.ReSharper.Daemon.Impl.IHighlightingWithRange.CalculateRange() { return myTypeUsage.GetDocumentRange(); }
    private JetBrains.DocumentModel.DocumentRange CalculateRange() { return myTypeUsage.GetDocumentRange(); }
    public bool IsValid()
    {
      return (myTypeUsage == null || myTypeUsage.IsValid());
    }
    
  }
  #endregion
}
